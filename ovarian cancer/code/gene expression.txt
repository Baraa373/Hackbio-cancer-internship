#########################################################
# Gene expression profiling of ovarian cancer 
#- TCGA-OV project - RNAseq data  

# Loading packages --------------------------------------------------------
library(readr)
library(org.Hs.eg.db)
library(DESeq2)

# Reading Data ------------------------------------------------------------
data.path="C:/Users/marie/Downloads/ovary_data/ovarian_data_TCGA"
pheno.path="C:/Users/marie/Downloads/ovary_data/ovarian_metadata.tsv"

#loading RNA-seq data
files = list.files(data.path, recursive = T, pattern = "tsv")
length(files)

# read the first file for the first time
file = files[1]
filepath = file.path(data.path, files[1])
colnames = unlist(strsplit(readLines(filepath, n=2)[2], "\t"))

#reading the table:
temp = read.table(filepath, header = F, skip = 6)
names(temp) = colnames

genetype_mapper = temp[, c(2,3)]

#creating a storing object in which we store the TPMs of each file
exp = temp[temp$gene_type == "protein_coding", c(1,2)]

for (i in 1:length(files)) {
  file = files[i]
  file.id = strsplit(file, "/")[[1]][1]
  filepath = file.path(data.path, files[i])
  
  temp = read.table(filepath, header = F, skip=6)
  temp = temp[temp[, 3]=="protein_coding", ]
  
  exp = cbind(exp, temp[, 4])
  colnames(exp)[dim(exp)[2]] = file.id
}


# Quality Control ---------------------------------------------------------
sum(duplicated(exp$gene_name)) #there are 24 duplicates

#so let's remove these duplicates by aggregation
exp.data = exp[, 3:dim(exp)[2]]
exp.data = apply(exp.data, 2, as.numeric)
dim(exp.data)

exp.data.agg = aggregate(exp.data, list(exp$gene_name), FUN = mean)
dim(exp.data.agg)
genes =exp.data.agg$Group.1
exp.data.agg = exp.data.agg[, -1]
exp.data.agg = apply(exp.data.agg, 2, as.numeric)
exp.data.agg = round(exp.data.agg)
rownames(exp.data.agg) = genes



# Loading the sample sheet ------------------------------------------------
pheno <- read_delim(pheno.path,"\t", escape_double = FALSE, trim_ws = TRUE)
table(pheno$Sample Type) #there are 421 primar tumor samples and 8 recurrent tumor samples

#adjusting colnames of phenotable:
names(pheno) = sub(" ", "_", names(pheno))

########changing colnames of exp.data.agg to sample names from the phenotable:
file.ids.pheno = pheno$File_ID
file.ids.data = colnames(exp.data.agg)

index.files = match(file.ids.data, file.ids.pheno)
colnames(exp.data.agg) = pheno$Sample_ID[index.files]


dim(exp.data.agg)
# Exploratory Analysis ----------------------------------------------------

#checking shape of my data: features must be the rownames and samples are the colnames


#checking mode of data:
mode(exp.data.agg) #it is numeric


# Filtration -------------------------------------------------------------
#removing constant genes:
dim(exp.data.agg)   #19938 rows and 429 columns
rowvar = apply(exp.data.agg, 1, var, na.rm = T)
constvar = (rowvar == 0 | is.na(rowvar))
sum(constvar) #there are 480 constant genes
exp.data.agg = exp.data.agg[!constvar, ]
dim(exp.data.agg)  #19520 rows

#Handling NAs:
sum(apply(exp.data.agg, 1, is.na)) #zero nulls

mat_clean = exp.data.agg
#save(mat_clean, file = "C:/Users/marie/Downloads/ovary_data/mat_clean.RDATA")
#load("C:/Users/marie/Downloads/ovary_data/mat_clean.RDATA")

#Removing the least 25% vaariant genes 
0.25*19962  #number of genes thaat should be removed (4990.5)
sds = rowSds(mat_clean)
mat_clean = as.data.frame(cbind(mat_clean, sds))
mat_clean = mat_clean[order(mat_clean$sds), ]
mat_clean = mat_clean[-c(1:4990), ]
dim(mat_clean)

exp = mat_clean[, -430]
write.csv(exp, file = "C:/Users/marie/Downloads/ovary_data/exp.csv")